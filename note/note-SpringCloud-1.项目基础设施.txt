1.项目SQL脚本
    #创建数据库
    CREATE DATABASE PAYMENT;
    #创建表
    CREATE TABLE `payment`(
        `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID',
        `serial` varchar(200) DEFAULT '',
        PRIMARY KEY(`id`)
    )ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
    #插入数据
    INSERT INTO PAYMENT(ID,SERIAL) VALUES(1,'15646546546');
2.查看SpringCloud和SpringBoot的版本对应关系
    https://start.spring.io/actuator/info
3.SpringCloud热部署
    1>.父工程pom.xml添加:
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>2.6.4</version>
                    <executions>
                        <execution>
                            <goals>
                            <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <fork>true</fork>
                        <addResources>true</addResources>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    2>.子工程pom.xml添加
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <!--
                1.optional表示是否依赖传递:
                    true:依赖不传递
                    false:依赖传递
                2.如果把热部署插件放在公共包中,则必须设置为false
                3.到了项目上线阶段,在公共包中将optional设置为true,则所有引用到公共包的项目全部无法使用热部署功能
            -->
            <optional>false</optional>
        </dependency>
    3>.更改idea设置
        Spring热部署-1.idea设置.png
        Spring热部署-2.idea设置.png
    4.SpringCloud热部署注意事项
        开发阶段开启热部署,发布阶段一定要关闭热部署
        在yml文件中配置:
            使用热部署组件并且开启热部署功能:spring.devtools.restart.enabled: true
            使用热部署组件但是不开启热部署功能:spring.devtools.restart.enabled: false
    4.编写父pom.xml
        定义各种依赖的版本号
4.微服务核心
    实现高可用
5.项目编写步骤:
    1.父工程搭建
    2.公共模块搭建
    3.基础服务提供者8001(服务提供者)、8002(服务提供者)搭建
    4.SpringCloud默认负载搭建(服务消费者)
    5.Ribbon负载均衡搭建
        +JAVA硬编码Ribbon负载均衡搭建
            -使用Ribbon自带的负载均衡算法搭建(服务消费者)
            -使用自定义的的负载均衡算法搭建(服务消费者)
        +YML文件配置Ribbon负载均衡搭建
            -使用Ribbon自带的负载均衡算法搭建(服务消费者)
            -使用自定义的的负载均衡算法搭建(服务消费者)
    6.OpenFeign负载均衡搭建
        JAVA硬编码OpenFeign负载均衡搭建(服务消费者)
        JAVA硬编码OpenFeign负载均衡搭建 + YML文件配置OpenFeign负载均衡搭建(服务消费者)
    7.带有服务熔断和服务降级的提供者8003(服务提供者)、8004(服务提供者)搭建
    7.Hystrix服务降级、服务熔断搭建(服务消费者)
    8.HystrixDashBorad搭建(单节点监控)
    9.HystrixDashBoradTurbine搭建(集群点监控)
    10.SpringCloud网关gateway搭建
        JAVA硬编码编写网关路由规则搭建
            -路由直接转发请求搭建
            -路由连接到注册中心负载均衡转发请求搭建
        YML文件配置编写网关路由规则搭建
            -路由直接转发请求搭建
            -路由连接到注册中心负载均衡转发请求搭建
    11.使用Apollo配置中心动态获取参数
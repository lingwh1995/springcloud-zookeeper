<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.openatom</groupId>
    <artifactId>springcloud-zookeeper</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <!--公共API-->
        <module>springcloud-api-commons</module>

        <!--Zookeeper版服务消费者:使用SpringCloud自带组件实现负载均衡-->
        <module>springcloud-consumer-loadbalance-default-order80</module>
        <!--Zookeeper版服务消费者:1.使用Ribbon实现负载均衡 2.Java硬编码方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-hardcode-order80</module>
        <!--Zookeeper版服务消费者:1.使用Ribbon实现负载均衡 2.YML文件配置方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-configuration-order80</module>
        <!--Zookeeper版服务消费者:1.使用Ribbon的自定义负载均衡算法实现负载均衡 2.Java硬编码方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-custom-strategy-hardcode-order80</module>
        <!--Zookeeper版服务消费者:1.使用Ribbon的自定义负载均衡算法实现负载均衡 2.YML文件配置方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-custom-strategy-configuration-order80</module>
        <!--Zookeeper版服务消费者:1.使用OpenFeign实现负载均衡 2.YML配置方式实现负载均衡-->
        <module>springcloud-consumer-loadbalance-openfeign-configuration-order80</module>
        <!--Zookeeper版服务消费者:1.使用OpenFeign实现负载均衡 2.Java硬编码方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-openfeign-hardcode-order80</module>
        <!--Zookeeper版服务消费者:1.使用OpenFeign实现负载均衡 2.Java硬编码方式实现负载均衡算法替换 3.加入了Hystrix-->
        <module>springcloud-consumer-hystrix-loadbalance-openfeign-configuration-order80</module>
        <!--Zookeeper版服务消费者:1.使用OpenFeign实现负载均衡 2.使用了apollo配置中心-->
        <module>springcloud-config-apollo-loadbalance-openfeign-configuration-order80</module>
        <!--Zookeeper版服务消费者:1.使用SpringCloud默认负载均衡 2.使用了Sleuth和Zipkin -->
        <module>springcloud-consumer-sleuth_zipkin-loadbalance-default-order80</module>

        <!--Zookeeper版服务提供者集群:服务提供者节点1-8001节点-->
        <module>springcloud-provider-cluster-node-payment8001</module>
        <!--Zookeeper版服务提供者集群:服务提供者节点2-8002节点-->
        <module>springcloud-provider-cluster-node-payment8002</module>
        <!--Zookeeper版服务提供者集群:服务提供者节点3-8003节点 3.加入了Hystrix-->
        <module>springcloud-provider-hystrix-cluster-node-payment8003</module>
		<!--Zookeeper版服务提供者集群:服务提供者节点2(带有熔断机制)-8004-->
        <module>springcloud-provider-hystrix-cluster-node-payment8004</module>
        <!--Zookeeper版服务提供者集群:服务提供者节点1-8005:1.默认负载均衡模式 2.使用了Sleuth和Zipkin-->
        <module>springcloud-provider-sleuth_zipkin-cluster-node-payment8005</module>
        <!--Zookeeper版服务提供者集群:服务提供者节点1-8006:1.默认负载均衡模式 2.使用了Sleuth和Zipkin-->
        <module>springcloud-provider-sleuth_zipkin-cluster-node-payment8006</module>

		<!--SpringCloud服务降级、服务熔断监控:监控单节点版-->
        <module>springcloud-mointor-hystrix-dashboard9001</module>
		<!--SpringCloud服务降级、服务熔断监控:监控集群多节点版-->
        <module>springcloud-mointor-hystrix-dashboard9002</module>

		<!--SpringCloud网关:1.直连模式 2.YML文件配置-->
        <module>springcloud-router-connect-direct-configuration-gateway9527</module>
        <!--SpringCloud网关:1.负载均衡模式 2.Java硬编码-->
        <module>springcloud-router-connect-loadbalance-hardcode-gateway9527</module>
        <!--SpringCloud网关:1.直连模式 2.Java硬编码-->
        <module>springcloud-router-connect-direct-hardcode-gateway9527</module>
        <!--SpringCloud网关:1.负载均衡模式 2.YML文件配置-->
        <module>springcloud-router-connect-loadbalance-configuration-gateway9527</module>
    </modules>

    <!-- 统一管理jar包版本 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.16.18</lombok.version>
        <mysql.version>5.1.47</mysql.version>
        <spring.boot.version>2.2.2.RELEASE</spring.boot.version>
        <druid.spring.boot.version>1.1.10</druid.spring.boot.version>
        <spring.cloud.version>Hoxton.SR1</spring.cloud.version>
        <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
        <org.openatom.api.commons.version>1.0-SNAPSHOT</org.openatom.api.commons.version>
        <com.ctrip.framework.apollo.apollo-client.version>2.0.1-SNAPSHOT</com.ctrip.framework.apollo.apollo-client.version>
    </properties>

    <!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  -->
    <dependencyManagement>
        <dependencies>
            <!--spring boot 2.2.2-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!--定义公共的工程版本-->
            <dependency>
                <groupId>org.openatom</groupId>
                <artifactId>springcloud-api-commons</artifactId>
                <version>${org.openatom.api.commons.version}</version>
            </dependency>
            <!--Apollo客户端-->
            <dependency>
                <groupId>com.ctrip.framework.apollo</groupId>
                <artifactId>apollo-client</artifactId>
                <version>${com.ctrip.framework.apollo.apollo-client.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>
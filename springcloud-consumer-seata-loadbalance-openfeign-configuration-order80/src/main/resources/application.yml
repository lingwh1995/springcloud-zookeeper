server:
  port: 80
  tomcat:
    mbeanregistry:
      enabled: true

spring:
  application:
    name: SPRINGCLOUD-CONSUMER-SEATA-LOADBALANCE-OPENFEIGN-CONFIGURATION-ORDER80 #注意:服务名不要出现_
  devtools:
    restart:
      enabled: true
  logging: #Spring运行日志配置
    level: info
  cloud:
    zookeeper:
      connect-string: 192.168.0.2:2181
  datasource:
    type: com.mysql.cj.jdbc.Driver            # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包
    url: jdbc:mysql://192.168.0.2:3306/seata_order
    username: root
    password: 123456

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    restart:
      enabled: true
#对OpenFeign进行单独配置
feign:
  client:
    config:
      default:
        #connectTimeout和readTimeout这两个得一起配置才会生效
        connectTimeout: 5000  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间
        readTimeout: 5000   #指的是建立连接后从服务器读取到可用资源所用的时间

ribbon:
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule  #Ribbon负载均衡规则类所在的路径,自带七种规则,也可以是自定位规则的类所在的路径

logging: #OpenFeign增强日志配置
  level:
    org.openatom.springcloud.services.AccountService: debug  #OpenFeign日志以什么级别监控哪个接口
    org.openatom.springcloud.services.StorageService: debug  #OpenFeign日志以什么级别监控哪个接口
    io:
      seata: info
mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: org.openatom.springcloud.entities    # 所有Entity别名类所在包

app:
  id: springcloud-seata
apollo:
  bootstrap:
    enabled: true
    namespaces: seata-order #多个namespaces之间使用,隔开

#所有服务信息:这是自定义的节点,和seata和项目无关
service:
  seata-server:
    name: seata-server
#所有服务信息:这是自定义的节点,和seata和项目无关
seata:
  enabled: true
  application-id: seata-order
  # 客户端和服务端在同一个事务组
  tx-service-group: my_test_tx_group
  # 事务群组,配置项值为TC集群名,需要与服务端在Eureka中注册时使用的应用名称保持一致
  service:
    vgroup-mapping.my_test_tx_group: ${service.seata-server.name}
  config:
    type: apollo
    apollo:
      seata: default
      cluster: default
      appId: ${app.id}
      apolloMeta: http://localhost:8080
      apolloConfigService: http://localhost:8080
      namespace: ${service.seata-server.name}
  registry:
    type: zk
    zk:
      serviceUrl: http://localhost:7001/eureka
      application: ${service.seata-server.name}
      weight: 1
      cluster: seata-server
      server-addr: 192.168.0.2:2181
      session-timeout: 20000
      connect-timeout: 20000
      username:
      password: